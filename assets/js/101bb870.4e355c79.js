"use strict";(self.webpackChunkogma=self.webpackChunkogma||[]).push([[552],{9613:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,y=m["".concat(s,".").concat(d)]||m[d]||u[d]||l;return n?a.createElement(y,i(i({ref:t},c),{},{components:n})):a.createElement(y,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5425:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>o,contentTitle:()=>s,metadata:()=>p,toc:()=>c,default:()=>m});var a=n(2245),r=n(5903),l=(n(9496),n(9613)),i=["components"],o={id:"styler",title:"Styler"},s="@ogma/styler",p={unversionedId:"styler",id:"styler",isDocsHomePage:!1,title:"Styler",description:"String formatting, made easy.",source:"@site/docs/styler.md",sourceDirName:".",slug:"/styler",permalink:"/ogma/docs/styler",editUrl:"https://github.com/jmcdo29/ogma/edit/main/apps/docs/docs/styler.md",tags:[],version:"current",frontMatter:{id:"styler",title:"Styler"},sidebar:"mySidebar",previous:{title:"CLI",permalink:"/ogma/docs/cli"}},c=[{value:"Why Not Chalk?",id:"why-not-chalk",children:[],level:2},{value:"Use",id:"use",children:[],level:2},{value:"What styles are available?",id:"what-styles-are-available",children:[],level:2},{value:"Turning Off Styling",id:"turning-off-styling",children:[{value:"Colors Only",id:"colors-only",children:[],level:3},{value:"All Styling",id:"all-styling",children:[],level:3}],level:2}],u={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"ogmastyler"},"@ogma/styler"),(0,l.kt)("p",null,"String formatting, made easy."),(0,l.kt)("h2",{id:"why-not-chalk"},"Why Not ",(0,l.kt)("a",{parentName:"h2",href:"https://github.com/chalk/chalk"},"Chalk"),"?"),(0,l.kt)("p",null,"Mostly this package was created for academic purposes and better understanding terminal ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ANSI_escape_code#SGR"},"SGRs"),", but I also like to know the code I'm using and how it works. Chalk is great, but the use of chaining ",(0,l.kt)("em",{parentName:"p"},"or")," using the property as a method is a bit strange to me. With ",(0,l.kt)("inlineCode",{parentName:"p"},"@ogma/styler")," I was able to use ",(0,l.kt)("inlineCode",{parentName:"p"},"getter"),"s for option chaining, a ",(0,l.kt)("inlineCode",{parentName:"p"},"const enum")," for all the SGR values, and a single method for finalizing the application to the string that is being styled."),(0,l.kt)("p",null,"With all that said, if you like Chalk, use Chalk. It's a great trusted package."),(0,l.kt)("h2",{id:"use"},"Use"),(0,l.kt)("p",null,"To use this package, simply install it"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"pnpm i @ogma/styler\nyarn add @ogma/styler\nnpm i @ogma/styler\n")),(0,l.kt)("p",null,"and import the ",(0,l.kt)("inlineCode",{parentName:"p"},"style")," instance from the package"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"import { style } from '@ogma/styler';\n")),(0,l.kt)("p",null,"And now you can chain options for your string, just make sure to ",(0,l.kt)("inlineCode",{parentName:"p"},"apply")," to the string (or primitive) you want to style."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"console.log(style.blue.yellowBg.underline.apply('Hello World!'));\n// prints \\x1B[34m\\x1B[43m\\x1B[4mHello World!\\x1B[0m\n")),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://ogma-docs-images.s3-us-west-2.amazonaws.com/blue-yellowbg-underline.png",alt:"blue-yellow-bg-underline"})),(0,l.kt)("h2",{id:"what-styles-are-available"},"What styles are available?"),(0,l.kt)("p",null,"Most of the ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters"},"values on the SGR list")," are available to use. ",(0,l.kt)("inlineCode",{parentName:"p"},"underline"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"italic"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"bold,")," ",(0,l.kt)("inlineCode",{parentName:"p"},"double-underline"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"blink"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"color")," to name a few."),(0,l.kt)("h2",{id:"turning-off-styling"},"Turning Off Styling"),(0,l.kt)("h3",{id:"colors-only"},"Colors Only"),(0,l.kt)("p",null,"If you'd like to turn off colors only you can do one of a few things."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"pass in a ",(0,l.kt)("inlineCode",{parentName:"li"},"stream")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"style.child()")," that has a ",(0,l.kt)("inlineCode",{parentName:"li"},"getColorDepth")," property that is a function that returns the value ",(0,l.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,l.kt)("li",{parentName:"ol"},"Set the ",(0,l.kt)("inlineCode",{parentName:"li"},"NO_COLOR")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"NODE_DISABLE_COLOR")," environment variables to any value. So long as ",(0,l.kt)("inlineCode",{parentName:"li"},"process.env.NO_COLOR")," is truthy, colors will be disabled"),(0,l.kt)("li",{parentName:"ol"},"Set the ",(0,l.kt)("inlineCode",{parentName:"li"},"FORCE_COLOR")," environment variable to ",(0,l.kt)("inlineCode",{parentName:"li"},"1"),".")),(0,l.kt)("h3",{id:"all-styling"},"All Styling"),(0,l.kt)("p",null,"If you want no styling in your production environment you can set the ",(0,l.kt)("inlineCode",{parentName:"p"},"NO_STYLE")," environment variable to anything that will result in a ",(0,l.kt)("inlineCode",{parentName:"p"},"truthy")," check."))}m.isMDXComponent=!0}}]);